<div class="alert alert-block alert-warning"> <font size=3>
—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–§


import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
pd.set_option('display.max_columns', 500)


%store -r pac
df_p = pac.copy()




# ------------------------------------today_date-----------
today_date = pd.to_datetime(pd.to_datetime('today').normalize(), dayfirst=True, errors = 'coerce').normalize()
today_date



# ------------------------------------–ë–∏–Ω–Ω–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö-----------


df_conc['deti'] = pd.cut(
    df_conc['–í–æ–∑—Ä–∞—Å—Ç'],
    bins=[0, 17, 150],
    labels=['–î–µ—Ç–∏', '–í–∑—Ä–æ—Å–ª—ã–µ']
 )

------------------------ –¥–Ω–∏ –≤ —á–∏—Å–ª–æ ---
.dt.days 


------------------------------------------------------------------------------------------------- –∫—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
df_p['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'] = pd.to_datetime(df_p['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']).dt.strftime("%m.%d.%Y")



 --------------------------------------------------------------------------------------------------------------------------------------—Ñ–æ—Ä–º–∞—Ç–Ω–µ–º –¥–∞—Ç—É –∫ –¥–∞—Ç–µ
df_p['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'] = pd.to_datetime(df_p['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'], dayfirst=True, errors = 'coerce').dt.normalize()
df_vid_posled['–ü–∞—Ü–∏–µ–Ω—Ç.–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'] = pd.to_datetime(df_vid_posled['–ü–∞—Ü–∏–µ–Ω—Ç.–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'], dayfirst=True, errors = 'coerce').dt.normalize()


def norm_date(df, list_date):
    for col_ in list_date:
        df[col_] = pd.to_datetime(df[col_], dayfirst=True, errors = 'coerce').dt.normalize()
    return df




–ö–ª—é—á---------------------------------------------------------- ------------------------------------------------------------------------------- –ö–ª—é—á

    df_p['–ö–ª—é—á'] = df_p['–ü–∞—Ü–∏–µ–Ω—Ç'].str.replace(' ', '').str.lower().str.replace('—ë', '–µ') + df_p['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'].astype('str')



–≥—É–≥–ª ------------------------------------------------------------------------- –≥—É–≥–ª
    # -------------------- –∫–∞—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥—É–≥–ª –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ_—É—à–µ–¥—à–∏—Ö_–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    df_–æ–±–æ—Ä—É–¥_—É—à–µ–¥—à = pd.read_csv('https://docs.google.com/spreadsheets/d/' + 
                       '1z4Y1FX1Oo5dhVmXbXjQo7GuqsjjQYooFdEcH7Kec6HU' + #–∫–ª—é—á –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
                       '/export?gid=' + 
                       '1300522810' + #–ª–∏—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ 0 —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–ª—Å—è –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∏–∑ –∫–Ω–∏–≥–∏
                       '&format=csv', dtype='object')


today ---------------------------------------------------------------------- today
    pd.to_datetime("today").strftime("%Y-%d-%m")


—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    # -------------AGE -------------
    def calculate_age(x,y,z):
        if z <= y:
            age = y.year - x.year - ((y.month, y.day) < (x.month, x.day)) 
            if age < 0:
                age = 0
        else:
            age = z.year - x.year - ((z.month, z.day) < (x.month, x.day)) 
            if age < 0:
                age = 0
        return age

     df_concat['–í–æ–∑—Ä–∞—Å—Ç'] = df_concat.apply( lambda x:  calculate_age(x['–î–†'], now, x['–î–∞—Ç–∞_–ø–µ—Ä–≤—ã—Ö_—Å–≤–µ–¥–µ–Ω–∏–π']),axis=1)----------------------------------------------------------- –≤–æ–∑—Ä–∞—Å—Ç–∞

------------------------------------------------------------------------------------------------------------------------------lambda
df = df.apply(lambda x: np.square(x) if x.name == 'd' else x, axis=1)



groupby -------------------------------------- groupby -------------------
    df_–ù–°.groupby(['deti','–û–Ω–∫–æ',]).agg({'–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞':'count'})

    ----------------
    df.groupby(['col1','col2']).agg(
         sum_col3 = ('col3','sum'),
         sum_col4 = ('col4','sum'),
         ).reset_index()

    ----------------
    df_862_–≥—É–≥–ª.groupby('–ü—Ä–∏—á–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ —Å–º–µ—Ä—Ç—å –±–µ–∑ –ü/–û').agg(sum_col3 = ('–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞','count')).reset_index().sort_values('sum_col3')


-------------------- sort ---
df_vizit_—Ç–æ–ª—å–∫–æ_–≤—Ä–∞—á.sort_values(by=['–ö–ª–∏–µ–Ω—Ç.–ö–æ–¥', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞'], ascending=[True])# , ascending=[True, False])



---------- –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã -*-*-*-*-*
df_vidachag = df_vidachag.replace(r"^ +| +$", r"", regex=True)




---------------------
df_vidachag[df_vidachag['*****'] == '***']



--------------------------------------------------------
df_google_only_poluch[df_google_only_poluch.duplicated('–ö–ª—é—á', keep=False)].sort_values('–ö–ª—é—á')



------------------------- COLOR ------

    !pip install simple_colors
    from simple_colors import *
    print(green(f' __dfdf__'.format(str)))




# ------------------------------------------------ —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—ã ---------------------
#  -------------------------------------------------------------------—Ñ–æ—Ä–º–∞—Ç–Ω–µ–º –¥–∞—Ç—É –∫ –¥–∞—Ç–µ
list_coluns_date = [
    '–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏',
    '–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ / –ø–æ–¥–∞—á–∏ –º–∞—à–∏–Ω—ã / —É—Å–∏–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç –º–∞—à–∏–Ω—ã',
    '–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏',
    '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—à–∏–Ω',
    '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–Ω–∏—Ç–∞—Ä–æ–≤',
]

def norm_date(df, list_date):
    for col_ in list_date:
        df[col_] = pd.to_datetime(df[col_], dayfirst=True, errors = 'coerce').dt.normalize()
    return df





# def data_norm(df, list_columns):
#     for i in list_columns:
#         df[i] = pd.to_datetime(df[i]).dt.strftime("%d.%m.%Y")
#     return df


------------------------------------ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞
df['col'] = df['col'].str[:9]



# üîé![image.png](attachment:8c492c1e-7038-464c-94f7-42b51df83acc.png) –ó–∞–≥—Ä—É–∑–∫–∞
## ‚úÖ –ó–∞–¥–∞–Ω–∏–µ 1
![alt text](https://san2.ru/images/hobby/gif/internetmap/10261.gif)
![alt text](https://san2.ru/images/hobby/gif/internetmap/262.gif)

https://skrinshoter.ru/sQfHu6IJQE6?a

---------------------------------------------------------------------------------- –ö–ê–†–¢–ò–ù–ö–ò 
<img src="./–ò—Å—Ö–æ–¥–Ω–∏–∫–∏_3–π_–∫–≤/–Ω–∞_—Ä—É–∫–∏.jpg" width="500">




postgres_oa

--------------------------------------------------------------------------------------------------------- —Ç–æ–ª—å–∫–æ –î–£–ë–õ–ò–ö–ê–¢–´ 
df_google_only_poluch[df_google_only_poluch.duplicated('–ö–ª—é—á', keep=False)].sort_values('–ö–ª—é—á')
df_monitor[df_monitor.duplicated('–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä (—É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –Ω–æ–º–µ—Ä–∞)')]




---------------------------------- PIVOT 
pd.pivot_table(df,
               index=["Manager", "Status"],
               columns=["Product"],
               values=["Quantity", "Price"],
               aggfunc={"Quantity": len, "Price": np.sum},
               fill_value=0)



____________________.unique().tolist()



#----------------------------- —Ç—Ä—é–∫–∏ —Å –Ω–æ—É—Ç–±—É–∫–∞–º–∏ -------------------
https://uproger.com/obrabotka-i-analiz-dannyh-python-15-krutyh-tryukov-jupiter-kotorye-sekonomyat-vam-vremya/


# pd.to_datetime("today").strftime("%Y-%d-%m") - pd.DateOffset(years=1)
# (pd.to_datetime("today") - pd.DateOffset(months=1))


# fig, ax = plt.subplots(figsize=(14, 6))
# # sns.heatmap(df_ppi,cmap='coolwarm', square=True, annot=True, fmt=',.0f')
# sns.heatmap(df_pps, cmap='crest', square=True, annot=True, fmt=',.0f')
# plt.show()


with pd.ExcelWriter(path_file + 'df_oblako_new_korkc_' + datetime.now().strftime("%Y%m%d") + '.xlsx',
                      engine="xlsxwriter",
                      date_format='DD.MM.YYYY',
                      datetime_format='DD.MM.YYYY') as writer:
    df_save.to_excel(writer, freeze_panes=(2,0), index = False)




with pd.ExcelWriter('df_emias_–æ–±–ª–∞–∫–æ' + '.xlsx',
                      engine="xlsxwriter",
                      date_format='DD.MM.YYYY',
                      datetime_format='DD.MM.YYYY') as writer:
    df_emias_–æ–±–ª–∞–∫–æ.to_excel(writer, freeze_panes=(2,0), index = False)



–≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤ VSC
https://www.nikomedvedev.ru/other/vscodeshortcuts/hotkeys.html

# /------------------------------------------------------------------------------------- –æ—Ç—Å–∞–≤–∏–º –ü–û–°–õ–ï–î–ù–ò–ô 
# ----------------------- —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤—ã–∞–Ω–∏—é
df_kis = df_kis.sort_values('–î–∞—Ç–∞ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏', ascending=False)
# --------------------------- –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–≥–∏–∏–µ –ì–û–°–ü–ò–¢–ê–õ–ò–ó–ê–¶–ò–ò
df_kis_last = df_kis.drop_duplicates('—Ñ–∏–æ–¥—Ä', keep='first')